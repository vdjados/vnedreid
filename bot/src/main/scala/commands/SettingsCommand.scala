package commands

import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.{Message, Update}
import org.telegram.telegrambots.meta.bots.AbsSender
import com.typesafe.scalalogging.LazyLogging
import spam.SpamChecker

class SettingsCommand extends CommandHandler with LazyLogging {
  private val spamChecker = new SpamChecker()
  
  override def processCommand(sender: AbsSender, update: Update, response: SendMessage): Unit = {
    val message: Message = update.getMessage
    val chatId = message.getChatId
    val text = message.getText
    
    // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    val args = text.split("\\s+").drop(1) // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /settings
    
    if (args.isEmpty) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      showCurrentSettings(response, chatId)
    } else {
      args(0) match {
        case "window" if args.length > 1 =>
          try {
            val seconds = args(1).toInt
            spamChecker.setMessageWindow(chatId, seconds)
            response.setText(s"‚úÖ –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ $seconds —Å–µ–∫—É–Ω–¥")
          } catch {
            case _: NumberFormatException =>
              response.setText("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
          }
          
        case "messages" if args.length > 1 =>
          try {
            val max = args(1).toInt
            spamChecker.setMaxMessages(chatId, max)
            response.setText(s"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ $max")
          } catch {
            case _: NumberFormatException =>
              response.setText("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
          }
          
        case "stats" =>
          spamChecker.getSpamStats(chatId)
          response.setText("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–º–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
          
        case _ =>
          response.setText("""
            |‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
            |
            |–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            |/settings window <—Å–µ–∫—É–Ω–¥—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
            |/settings messages <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            |/settings stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∞–º–∞
            |
            |–ü—Ä–∏–º–µ—Ä—ã:
            |/settings window 15 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ –≤ 15 —Å–µ–∫—É–Ω–¥
            |/settings messages 3 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –≤ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
            |""".stripMargin)
      }
    }
  }
  
  private def showCurrentSettings(response: SendMessage, chatId: Long): Unit = {
    val (window, max) = spamChecker.getSettings
    response.setText(s"""
      |‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞:
      |
      |‚Ä¢ –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: $window —Å–µ–∫—É–Ω–¥
      |‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π: $max
      |
      |–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
      |/settings window <—Å–µ–∫—É–Ω–¥—ã> - –∏–∑–º–µ–Ω–∏—Ç—å –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
      |/settings messages <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
      |/settings stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∞–º–∞
      |""".stripMargin)
  }
} 